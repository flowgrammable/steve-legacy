def ofp : namespace {

def Version : typename = enum(nat(8)) {
  OFP_1_3 = 4
}

def v1_3 : namespace {

def Type : typename = enum(nat(8)) {
  HELLO = 0, ERROR = 1, 
  ECHO_REQ = 2, ECHO_RES = 3, 
  EXPERIMENTER = 4,
  FEATURE_REQ = 5, FEATURE_RES = 6, 
  GET_CONFIG_REQ = 7, GET_CONFIG_RES = 8, SET_CONFIG = 9, 
  PACKET_IN = 10, 
  FLOW_REMOVED = 11, 
  PORT_STATUS = 12,
  PACKET_OUT = 13, 
  FLOW_MOD = 14, GROUP_MOD = 15, PORT_MOD = 16, TABLE_MOD = 17
  MULTIPART_REQ = 18, MULTIPART_RES = 19, 
  BARRIER_REQ = 20, BARRIER_RES = 21,
  QUEUE_GET_CONFIG_REQ = 22, QUEUE_GET_CONFIG_RES = 23, 
  ROLE_REQ = 24, ROLE_RES = 25, 
  GET_ASYNC_REQ = 26, GET_ASYNC_RES = 27, SET_ASYNC = 28,
  METER_MOD = 29
}

def Data : typename = record {
  data : vector(nat(8));
}

def HelloType : typename = enum(nat(16,msbf)) {
  VERSION_BITMAP = 1
}

def HelloPayload(ht:HelloType) : typename = variant {
  nat(32,msbf) if ht == VERSION_BITMAP;
}

def HelloElement : typename = record {
  type    : HelloType;
  length  : nat(16,msbf);
  payload : HelloPayload(type);
}

def Hello : typename = record {
  elements : vector(HelloElement);
}

ErrorType : typename = enum(nat(16,msbf)) {
  HELLO_FAILED          = 0,
  BAD_REQUEST           = 1,
  BAD_ACTION            = 2,
  BAD_INSTRUCTION       = 3,
  BAD_MATCH             = 4,
  FLOW_MOD_FAILED       = 5,
  GROUP_MOD_FAILED      = 6,
  PORT_MOD_FAILED       = 7,
  TABLE_MOD_FAILED      = 8,
  QUEUE_OP_FAILED       = 9,
  SWITCH_CONFIG_FAILED  = 10,
  ROLE_REQUEST_FAILED   = 11,
  METER_MOD_FAILED      = 12,
  TABLE_FEATURES_FAILED = 13
}

HelloFailedCode : typename = enum(nat(16,msbf)) {
  INCOMPATIBLE = 0,
  EPERM        = 1  
}

BadRequestCode : typename = enum(nat(16,msbf)) {
  BAD_VERSION               = 0,
  BAD_TYPE                  = 1,
  BAD_MULTIPART             = 2,
  BAD_EXPERIMENTER          = 3,
  BAD_EXPERIMENTER_TYPE     = 4,
  EPERM                     = 5,
  BAD_LENGTH                = 6,
  BUFFER_EMPTY              = 7,
  BUFFER_UNKNOWN            = 8,
  BAD_TABLE_ID              = 9,
  IS_SLAVE                  = 10,
  BAD_PORT                  = 11,
  BAD_PACKET                = 12,
  MULTIPART_BUFFER_OVERFLOW = 13
}

BadActionCode : typename = enum(nat(16,msbf)) {
  BAD_TYPE              = 0,
  BAD_LENGTH            = 1,
  BAD_EXPERIMENTER      = 2,
  BAD_EXPERIMENTER_TYPE = 3,
  BAD_OUT_PORT          = 4,
  BAD_ARGUMENT          = 5,
  EPERM                 = 6,
  TOO_MANY              = 7,
  BAD_QUEUE             = 8,
  BAD_OUT_GROUP         = 9,
  MATCH_INCONSISTENT    = 10,
  UNSUPPORTED_ORDER     = 11,
  BAD_TAG               = 12,
  BAD_SET_TYPE          = 13,
  BAD_SET_LENGTH        = 14,
  BAD_SET_ARGUMENT      = 15
}

BadInstructionCode : typename = enum(nat(16,msbf)) {
  UNKNOWN_INST          = 0,
  UNSUP_INST            = 1,
  BAD_TABLE_ID          = 2,
  UNSUP_METADATA        = 3,
  UNSUP_METADATA_MASK   = 4,
  BAD_EXPERIMENTER      = 5
  BAD_EXPERIMENTER_TYPE = 6,
  BAD_LENGTH            = 7,
  EPERM                 = 8
}

BadMatch : typename = enum(nat(16,msbf)) {
  BAD_TYPE         = 0,
  BAD_LENGTH       = 1,
  BAD_TAG          = 2,
  BAD_DL_ADDR_MASK = 3,
  BAD_HW_ADDR_MASK = 4,
  BAD_WILDCARDS    = 5,
  BAD_FIELD        = 6,
  BAD_VALUE        = 7,
  BAD_MASK         = 8,
  BAD_PREREQ       = 9,
  DUPLICATE_FIELD  = 10,
  EPERM            = 11
}

FlowModFailedCode : typename = enum(nat(16,msbf)) {
  UNKNOWN      = 0,
  TABLE_FULL   = 1,
  BAD_TABLE_ID = 2,
  OVERLAP      = 3,
  EPERM        = 4,
  BAD_TIMEOUT  = 5,
  BAD_COMMAND  = 6,
  BAD_FLAGS    = 7
}

GroupModFailedCode : typename = enum(nat(16,msbf)) {
  GROUP_EXISTS         = 0,
  INVALID_GROUP        = 1,
  WEIGHT_UNSUPPORTED   = 2,
  OUT_OF_GROUPS        = 3,
  OUT_OF_BUCKETS       = 4,
  CHAINING_UNSUPPORTED = 5,
  WATCH_UNSUPPORTED    = 6,
  LOOP                 = 7,
  UNKNOWN_GROUP        = 8,
  CHAINED_GROUP        = 9,
  BAD_TYPE             = 10,
  BAD_COMMAND          = 11,
  BAD_BUCKET           = 12,
  BAD_WATCH            = 13,
  EPERM                = 14
}

PortModFailedCode : typename = enum(nat(16,msbf)) {
  BAD_PORT      = 0,
  BAD_HW_ADDR   = 1,
  BAD_CONFIG    = 2,
  BAD_ADVERTISE = 3,
  EPERM         = 4
}

TableModFailedCode : typename = enum(nat(16,msbf)) {
  BAD_TABLE  = 0,
  BAD_CONFIG = 1,
  EPERM      = 2
}

QueueOpFailedCode : typename = enum(nat(16,msbf)) {
  BAD_PORT  = 0,
  BAD_QUEUE = 1,
  EPERM     = 2
}

SwitchConfigFailedCode : typename = enum(nat(16,msbf)) {
  BAD_FLAGS = 0,
  BAD_LEN   = 1,
  EPERM     = 2
}

RoleRequestFailedCode : typename = enum(nat(16,msbf)) {
  STALE       = 0,
  UNSUPPORTED = 1,
  BAD_ROLE    = 2
}

MeterModFailedCode : typename = enum(nat(16,msbf)) {
  UNKNOWN        = 0,
  METER_EXISTS   = 1,
  INVALID_METER  = 2,
  UNKNOWN_METER  = 3,
  BAD_COMMAND    = 4,
  BAD_FLAGS      = 5,
  BAD_RATE       = 6,
  BAD_BURST      = 7,
  BAD_BAND       = 8,
  BAD_BAND_VALUE = 9,
  OUT_OF_METERS  = 10,
  OUT_OF_BANDS   = 11
}

TableFeaturesFailedCode : typename = enum(nat(16,msbf)) {
  BAD_TABLE    = 0,
  BAD_METADATA = 1,
  BAD_TYPE     = 2,
  BAD_LENGTH   = 3,
  BAD_ARGUMENT = 4,
  EPERM        = 5
} 

def ErrorCode(t:ErrorType):typename = variant {
  HelloFailedCode         if t == HELLO_FAILED;
  BadRequestCode          if t == BAD_REQUEST;
  BadActionCode           if t == BAD_ACTION;
  BadInstructionCode      if t == BAD_INSTRUCTION;
  BadMatch                if t == BAD_MATCH;     
  FlowModFailedCode       if t == FLOW_MOD_FAILED;
  GroupModFailedCode      if t == GROUP_MOD_FAILED;
  PortModFailedCode       if t == PORT_MOD_FAILED;
  TableModFailedCode      if t == TABLE_MOD_FAILED;
  QueueOpFailedCode       if t == QUEUE_OP_FAILED;
  SwitchConfigFailedCode  if t == SWITCH_CONFIG_FAILED;
  RoleRequestFailedCode   if t == ROLE_REQUEST_FAILED;
  MeterModFailedCode      if t == METER_MOD_FAILED;
  TableFeaturesFailedCode if t == TABLE_FEATURES_FAILED;
}

def Error : typename = record {
  type : ErrorType;
  code : ErrorCode;
  data : vector(nat(8));
}

def EchoReq : typename = Data;
def EchoRes : typename = Data;

def Experimenter : typename = record {
  id   : nat(32,msbf);
  data : Data;
}

def Empty : typename = record {}

def FeatureReq : typename = Empty;

def FeatureCapabilities : typename = enum(nat(32,msbf)) {
  0..(1 << 9 - 1),
  FLOW_STATS   = 1 << 0,
  TABLE_STATS  = 1 << 1,
  PORT_STATS   = 1 << 2,
  GROUP_STATS  = 1 << 3,
  IP_REASM     = 1 << 5,
  QUEUE_STATS  = 1 << 6,
  PORT_BLOCKED = 1 << 8,
}

def FeatureRes : typename = record {
  datapath-id  : nat(64,msbf);
  n_buffers    : nat(32,msbf);
  n_tables     : nat(8);
  aux_id       : nat(8);
               : nat(24);
  capabilities : FeatureCapabilities;
  reserved     : nat(32,msbf);
}

def GetConfigReq : typename = Empty;

def ConfigFlags : typename = enum(nat(16,msbf)) {
  FRAG_NORMAL = 0,
  FRAG_DROP   = 1,
  FRAG_REASM  = 2,
  FRAG_MASK   = 3
}

def GetConfigRes : typename = record {
  flags         : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def SetConfig : typename = record {
  flags         : ConfigFlags;
  miss_send_len : nat(16,msbf);
}

def PacketInReason : typename = enum(nat(8)) {
  NO_MACTH    = 0,
  ACTION      = 1,
  INVALID_TTL = 2
}

def MatchType : typename = enum(nat(16, msbf)) {
  STANDARD = 0,
  OXM      = 1
}

def OxmClass : typename = enum(nat(8)) {
  NXM_0          = 0;
  NXM_1          = 1;
  OPENFLOW_BASIC = 0x8000;
}

def OxmField : typename = enum(nat(7)) {
IN_PORT        = 0,
  IN_PHY_PORT    = 1,
  METADATA       = 2,
  ETH_DST        = 3,
  ETH_SRC        = 4,
  ETH_TYPE       = 5,
  VLAN_VID       = 6,
  VLAN_PCP       = 7,
  IP_DSCP        = 8,
  IP_ECN         = 9,
  IP_PROTO       = 10,
  IPV4_SRC       = 11,
  IPV4_DST       = 12,
  TCP_SRC        = 13,
  TCP_DST        = 14,
  UDP_SRC        = 15,
  UDP_DST        = 16,
  SCTP_SRC       = 17,
  SCTP_DST       = 18,
  ICMPV4_TYPE    = 19,
  ICMPV4_CODE    = 20,
  ARP_OP         = 21,
  ARP_SPA        = 22,
  ARP_TPA        = 23,
  ARP_SHA        = 24,
  ARP_THA        = 25,
  IPV6_SRC       = 26,
  IPV6_DST       = 27,
  IPV6_FLABEL    = 28,
  ICMPV6_TYPE    = 29,
  ICMPV6_CODE    = 30,
  IPV6_ND_TARGET = 31,
  IPV6_ND_SLL    = 32,
  IPV6_ND_TLL    = 33,
  MPLS_LABEL     = 34,
  MPLS_TC        = 35,
  MPLS_BOS       = 36,
  PBB_ISID       = 37,
  TUNNEL_ID      = 38,
  IPV6_HEXTHDR   = 39,
  EXPERIMENTER   = 127
}

def Oxm1 : typename = record {
  data : nat(32,msbf);
}

def OxmInPort : typename = Oxm1; 
def OxmInPhyPort : type = Oxm1; 

def Oxm8 : typename = record {
  data : nat(64,msbf);
}

def OxmMetadata : typename = Oxm8;

def Oxm2 : typename = record {
  data : nat(48,msbf);
}

def OxmEthDst : typename = Oxm2;
def OxmEthSrc : typename = Oxm2;

def Oxm3 : typename = record {
  data : nat(16,msbf);
}

def OxmEthType : typename = Oxm3;

def OxmVlanVid : typename = record {
  vlan_vid : nat(13,msbf);
}

def Oxm7 : typename = record {
  data : nat(3);
}

def OxmVlanPcp : typename = Oxm7;

def OxmIpDscp : typename = record {
  ip_dscp : nat(6);
}

def OxmIpEcn : typename = record {
  ip_ecn : nat(2);
}

def Oxm4 : typename = record {
  data : nat(8);
}

def OxmIpProto : typename = Oxm4; 

def OxmIpv4Src : typename = Oxm1;
def OxmIpv4Dst: typename = Oxm1;

def OxmTcpSrc : typename = Oxm3;
def OxmTcpDst : typename = Oxm3;
def OxmUdpSrc : typename = Oxm3;
def OxmUdpDst : typename = Oxm3;
def OxmSctpSrc : typename = Oxm3;
def OxmSctpDst : typename = Oxm3;

def OxmIpv4Type : typename = Oxm4;
def OxmIpv4Code : typename = Oxm4;

def OxmArpOp : typename = Oxm3;

def OxmArpSpa : typename = Oxm1;
def OxmArpTpa : typename = Oxm1;

def OxmArpSha : typename = Oxm2;
def OxmArpTha : typename = Oxm2;

def Oxm5 : typename = record {
  data : array(char, 16);
}

def OxmIpv6Src : typename = Oxm5;
def OxmIpv6Dst : typename = Oxm5;

def Oxm6 : typename = record {
  data : nat(20,msbf);
}

def OxmIpv6Flabel : typename = Oxm6;

def OxmIcmpv6Type : typename = Oxm4;

def OxmIpv6NdTarget : typename = Oxm5;

def OxmIpv6NdSll : typename = Oxm2;
def OxmIpv6NdTll : typename = Oxm2;

def OxmMplsLabel : typename = Oxm6;

def OxmMplsTc : typename = Oxm7;

def OxmMplsBos : typename = record {
  mpls_bos : nat(1);
}

def OxmPbbIsid : typename = record {
  pbb_isid : nat(24,msbf);
}

def OxmTunnelId : typename = Oxm8;

def OxmIpv6Hexthdr : typename = record {
  ipv6_hexthdr : nat(9,msbf);
}

def OxmPayload(t:OxmField):typename = variant {
  OxmInPort       if t == IN_PORT;
  OxmInPhyPort    if t == IN_PHY_PORT;
  OxmMetadata     if t == METADATA;
  OxmEthDst       if t == ETH_DST;
  OxmEthSrc       if t == ETH_SRC;
  OxmEthType      if t == ETH_TYPE;
  OxmVlanVid      if t == VLAN_VID;
  OxmVlanPcp      if t == VLAN_PCP;
  OxmIpDscp       if t == IP_DSCP;  
  OxmIpEcn        if t == IP_ECN;
  OxmIpProto      if t == IP_PROTO;
  OxmIpv4Src      if t == IPV4_SRC;
  OxmIpv4Dst      if t == IPV4_DST;
  OxmTcpSrc       if t == TCP_SRC;
  OxmTcpDst       if t == TCP_DST;
  OxmUdpSrc       if t == UDP_SRC;
  OxmUdpDst       if t == UDP_DST;
  OxmSctpSrc      if t == SCTP_SRC;
  OxmSctpDst      if t == SCTP_DST;
  OxmIcmpv4Type   if t == ICMPV4_TYPE;
  OxmIcmpv4Code   if t == ICMPV4_CODE;
  OxmArpOp        if t == ARP_OP;
  OxmArpSpa       if t == ARP_SPA;
  OxmArpTpa       if t == ARP_TPA;
  OxmArpTha       if t == ARP_THA;
  OxmIpv6Src      if t == IPV6_SRC;
  OxmIpv6Dst      if t == IPV6_DST;
  OxmIpv6Flabel   if t == IPV6_FLABEL;
  OxmIcmpv6Type   if t == ICMPV6_TYPE;
  OxmIcmpv6Code   if t == ICMPV6_CODE; 
  OxmIpv6NdTarget if t == IPV6_ND_TARGET;
  OxmIpv6NdSll    if t == IPV6_ND_SLL;
  OxmIpv6NdTll    if t == IPV6_ND_TLL;
  OxmMplsLabel    if t == MPLS_LABEL;
  OxmMplsTc       if t == MPLS_TC;
  OxmMplsBos      if t == MPLS_BOS;
  OxmPbbIsid      if t == PBB_ISID;
  OxmTunnelId     if t == TUNNEL_ID;
  OxmIpv6Hexthdr  if t == IPV6_HEXTHDR;
}
  
def Oxm : typename = record {
  class   : OxmClass;
  field   : OxmField;
  hasmask : nat(1);
  payload : constrain(length - 4, OxmPayload(field));
}

def Match : typename = record {
  type        : MatchType;
  length      : nat(16,msbf);
              : nat(32);
  oxms        : vector(Oxm));			  
} 

def PacketIn : typename = record {
  buffer_id   : nat(32,msbf);
  total_len   : nat(16,msbf);
  reason      : PacketInReason;
  table_id    : nat(8);
  cookie      : nat(32,msbf);
  match       : Match;
              : nat(16);
  data        : Data;
}

def FlowRemovedReason : typename = enum(nat(8)) {
  IDLE_TIMEOUT = 0,
  HARD_TIMEOUT = 1,
  DELETE       = 2,
  GROUP_DELETE = 3
}

def FlowRemoved : typename = record {
  cookie        : nat(64,msbf);
  priority      : nat(16,msbf);  
  reason    	: FlowRemovedReason;
  table_id      : nat(8);
  duration_sec  : nat(32,msbf); 
  duration_nsec : nat(32,msbf);   
  idle_timeout  : nat(16,msbf);
  hard_timeout  : nat(16,msbf);
  packet_count  : nat(64,msbf); 
  byte_count    : nat(64,msbf);
  match         : Match;  
}

def PortStatusReason : typename = enum(nat(8)) {
  ADD 	 = 0,
  DELETE = 1,
  MODIFY = 2
}

def Port_Id : typename = enum(nat(32,msbf)) {
  0..0xFFFFFFFF
  MAX        = 0xFFFFFF00,
  IN_PORT    = 0xFFFFFFF8,
  TABLE      = 0xFFFFFFF9,
  NORMAL     = 0xFFFFFFFA,
  FLOOD      = 0xFFFFFFFB,
  ALL        = 0xFFFFFFFC,
  CONTROLLER = 0xFFFFFFFD,
  LOCAL      = 0xFFFFFFFE,
  ANY        = 0xFFFFFFFF
}

def PortConfig : typename = enum(nat(32,msbf)) {
  0..(1 << 7 - 1),
  PORT_DOWN	  = 1 << 0,
  NO_RECV     = 1 << 2,
  NO_FWD      = 1 << 5,
  NO_PACKETIN = 1 << 6
}

def PortState : typename = enum(nat(32,msbf)) {
  0..(1 << 3 - 1),
  LINK_DOWN   = 1 << 0,
  BLOCKED     = 1 << 1,
  LIVE        = 1 << 2,
}

def PortFeature : typename = enum(nat(32,msbf)) {
  0..(1 << 16 - 1),
  10MB_HD    = 1 << 0,
  10MB_FD    = 1 << 1,
  100MD_HD   = 1 << 2,
  100MD_FD   = 1 << 3,
  1GB_HD     = 1 << 4,
  1GB_FD     = 1 << 5,
  10GB_FD    = 1 << 6,
  40GB_FD    = 1 << 7,
  100GB_FD   = 1 << 8,
  1TB_FD     = 1 << 9,
  OTHER      = 1 << 10,
  COPPER     = 1 << 11,
  FIBER      = 1 << 12,
  AUTO_NEG   = 1 << 13,
  PAUSE      = 1 << 14,
  PAUSE_ASYM = 1 << 15
}

def Port : typename = record {
  port_id    : Port_Id;
             : nat(32);
  hw_addr    : nat(48,msbf);
  name       : array(char,16);
  config     : PortConfig;
  state      : PortState;
  curr       : PortFeature;
  advertised : PortFeature;
  supported  : PortFeature;
  peer       : PortFeature;
  curr_speed : nat(32,msbf);
  max_speed  : nat(32,msbf);
}


def PortStatus : typename = record {
  reason : PortStatusReason;
         : nat(56);  
  port   : Port		 
}

def PortID : type = enum(nat(32,msbf)) {
  0..0xFFFFFF00
}

def ActionType : typename = enum(nat(16,msbf)) {
  OUTPUT         = 0,
  COPY_TTL_OUT   = 11,
  COPY_TTL_IN    = 12,
  SET_MPLS_TLL   = 15,
  DEC_MPLS_TLL   = 16,
  PUSH_VLAN      = 17,
  POP_VLAN       = 18,
  PUSH_MPLS      = 19,
  POP_MPLS       = 20,
  SET_QUEUE      = 21,
  GROUP          = 22,
  SET_NW_TTL     = 23,
  DEC_NW_TTL     = 24,
  SET_FIELD      = 25,
  PUSH_PBB       = 26,
  POP_PBB        = 27,
  EXPERIMENTER   = 0xFF
}

def ActionHeader : typename = record {
  type    : ActionType;
  length  : nat(16,msbf);
}

def ActionOutput : typename = record {
  port    : Port_Id;
  max_len : nat(16,msbf);
          : nat(48);
}

def ActionCopyTtlOut : typename = Empty;
def ActionCopyTtlIn : typename = Empty;

def Action1 : typename = record {
  data : nat(8);
       : nat(24);
}

def ActionSetMplsTtl : typename = Action1;

def ActionDecMplsTtl : typename = Empty;

def Action2 : typename = record {
  data : nat(16,msbf);
       : nat(16);
}

def ActionPushMpls : typename = Action2;

def ActionPopMpls : typename = Empty;

def ActionPushVlan : typename = Action2;

def ActionPopVlan : typename = Empty;

def Action3: typename = record {
  data : nat(32,msbf);
}

def ActionSetQueue : typename = Action3;
def ActionGroup : typename = Action3;

def ActionSetNwTtl : typename = Action1;

def ActionDecNwTtl : typename = Empty;

def ActionSetField : typename = record {
  oxm : Oxm;
}

def ActionPushPbb : typename = Action2;

def ActionPopPbb : typename = Empty;

def ActionExperimenter : typename = Action3;

def ActionPayload(t:ActionType):typename = variant {
  ActionOutput       if t == OUTPUT;
  ActionCopyTtlOut   if t == COPY_TTL_OUT;
  ActionCopyTtlIn    if t == COPY_TTL_IN;
  ActionSetMplsTtl   if t == SET_MPLS_TTL;
  ActionDecMplsTtl   if t == DEC_MPLS_TTL;
  ActionPushVlan     if t == PUSH_VLAN;
  ActionPopVlan      if t == POP_VLAN;
  ActionPushMpls     if t == PUSH_MPLS;
  ActionPopMpls      if t == POP_MPLS;
  ActionSetQueue     if t == SET_QUEUE;
  ActionGroup        if t == GROUP;
  ActionSetNwTtl     if t == SET_NW_TTL;
  ActionDecNwTtl     if t == DEC_NW_TTL;
  ActionSetField     if t == SET_FIELD;
  ActionPushPbb      if t == PUSH_PBB;
  ActionPopPbb       if t == POP_PBB;
  ActionExperimenter if t == EXPERIMENTER;
}

def Action : typename = record {
  type    : ActionType;
  length  : nat(16,msbf);
  payload : constrain(length - 4, ActionPayload(type));
}

def PacketOut : typename = record {
  buffer_id   : nat(32,msbf);
  in_port     : PortID;
  actions_len : nat(16,msbf);
              : nat(32);	
  actions     : vector(Action);			
  data        : constrain(actions_len, Data);
}

def FlowModCommand : typename = enum(nat(16,msbf)) {
  ADD           = 0,
  MODIFY        = 1,
  MODIFY_STRICT = 2,
  DELETE        = 3,
  DELETE_STRICT = 4,
}

def FlowModFlags : typename = enum(nat(16,msbf)) {
  SEND_FLOW_REM	   = 1,
  CHECK_OVERLAP    = 2,
  RESET_COUNTS     = 4,
  NO_PACKET_COUNTS = 16,
  NO_BYTE_COUNTS   = 32
}

def InstructionType : typename = enum(nat(16,msbf)) {
  GOTO_TABLE     = 1,
  WRITE_METADATA = 2,
  WRITE_ACTIONS  = 3,
  APPLY_ACTIONS  = 4,
  CLEAR_ACTIONS  = 5,
  METER          = 6,
  EXPERIMENTER   = 0xFF
}

def InstructionGotoTable : typename = record {
  table_id : nat(8);
           : nat(24);
}

def InstructionWriteMetadata : typename = record {
                : nat(32);
  metadata      : nat(64,msbf);
  metadata_mask : nat(64,msbf);
}

def InstructionActions : typename = record {
          : nat(32);
  actions : vector(Action);
}

def InstructionWriteActions : typename = InstructionActions;
def InstructionApplyActions : typename = InstructionActions;
def InstructionClearActions : typename = InstructionActions;

def Instruction1 : typename = record {
  data : nat(32,msbf);
}

def InstructionMeter: typename = Instruction1;
def InstructionExperimenter : typename = Instruction1;

def InstructionPayload(t:ActionType):typename = variant {
  InstructionGotoTable     if t == GOTO_TABLE;
  InstructionWriteMetadata if t == WRITE_METADATA;
  InstructionWriteActions  if t == WRITE_ACTIONS;
  InstructionApplyActions  if t == APPLY_ACTIONS;
  InstructionClearActions  if t == CLEAR_ACTIONS;
  InstructionMeter         if t == METER;
  InstructionExperimenter  if t == EXPERIMENTER;
}
  
def Instruction : typename = record {
  type    : InstructionType;
  length  : nat(16,msbf);
  payload : constrain(length - 4, InstructionPayload(type));
}

def FlowMod : typename = record {
  cookie       : nat(64,msbf);
  cookie_mask  : nat(64,msbf);
  table_id     : nat(8);  
  command      : FlowModCommand;
  idle_timeout : nat(16,msbf);
  hard_timeout : nat(16,msbf);
  priority     : nat(16,msbf); 
  buffer_id    : nat(32,msbf);
  out_port     : nat(32,msbf);
  out_group    : nat(32,msbf);
  flags        : FlowModFlags;
               : nat(16);
  match        : Match;
  instructions : vector(Instruction);	
}

def GroupModCommand : typename = enum(nat(16,msbf)) {
  ADD    = 0,
  MODIFY = 1,
  DELETE = 2
}

def GroupModType : typename = enum(nat(8)) {
  ALL           = 0,
  SELECT        = 1,
  INDIRECT      = 2,
  FAST_FAILOVER = 3
}

def Bucket : typename = record {
  length        : nat(16,msbf);
  weight        : nat(16,msbf);
  watch_port    : nat(32,msbf);
  watch_group   : nat(32,msbf);
                : nat(32);
  action_header : ActionHeader;
}

def GroupMod : typename = record {
  command  : GroupModCommand;
  type     : GroupModType;
           : nat(8);
  group_id : nat(32,msbf);
  buckets  : vector(Bucket);
}

def PortModConfig : typename = enum(nat(32,msbf)) {	
  PORT_DOWN	  = 1 << 0,
  NO_STP      = 1 << 1,
  NO_RECV     = 1 << 2,
  NO_RECV_STP = 1 << 3,
  NO_FLOOD    = 1 << 4,
  NO_FWD      = 1 << 5,
  NO_PACKETIN = 1 << 6
}

def PortMod : typename = record {
  port      : Port_Id;
            : nat(32);
  hw_addr   : nat(48,msbf);
            : nat(16);
  config    : PortModConfig;
  mask      : PortConfig;
  advertise : PortFeature;
            : nat(32);
}

def Table_Id : typename = enum(nat(8)) {	
  0..254
}

def TableModConfig: typename = enum(nat(32,msbf)) {	
  MISS_CONTROLLER = 0,
  MISS_CONTINUE   = 1,
  MISS_DROP       = 2,
  MISS_MASK       = 3
}

def TableMod : typename = record {
  table_id : Table_Id;
           : nat(24);  
  config   : TableModConfig; 
}

def MultipartType : typename = enum(nat(16,msbf)) {	
  DESC           = 0,
  FLOW           = 1,
  AGGREGATE      = 2,
  TABLE          = 3,
  PORT           = 4,
  QUEUE          = 5,
  GROUP          = 6,
  GROUP_DESC     = 7,
  GROUP_FEATURES = 8,
  METER          = 9,
  METER_CONFIG   = 10,
  METER_FEATURES = 11,
  TABLE_FEATURES = 12,
  EXPERIMENTER = 0xFF
}

def MultipartReqDesc : typename = Empty;

def MultipartReqFlow : typename = record {
  table_id    : nat(8);
              : nat(24);
  out_port    : Port_Id;
  out_group   : nat(32,msbf);
              : nat(32);
  cookie      : nat(64,msbf);
  cookie_mask : nat(64,msbf);
  match       : Match;
}

def MultipartReqAggregate : typename = record {
  table_id    : nat(8);
              : nat(24);
  out_port    : Port_Id;
  out_group   : nat(32,msbf);
              : nat(32);
  cookie      : nat(64,msbf);
  cookie_mask : nat(64,msbf);
  match       : Match;
}

def MultipartReqTable : typename = Empty;

def MultipartReqPort : typename = record {
  port_no : Port_Id;
          : nat(48);
}

def MultipartReqQueue : typename = record {
  port_no  : Port_Id;
  queue_id : nat(32,msbf);	  
}

def MultipartReqGroup : typename = record {
  group_id : nat(32,msbf);
           : nat(32);  
}

def MultipartReqGroupDesc : typename = Empty;
def MultipartReqGroupFeatures : typename = Empty;

def MultipartReq1 : typename = record {
  data : nat(32,msbf);
       : nat(32);  
}

def MultipartReqMeter : typename = MultipartReq1;
def MultipartReqMeterConfig : typename = MultipartReq1;

def MultipartReqMeterFeatures : type = Empty;
def MultipartReqTableFeatures : type = Empty;

def MultipartReqExperimenter : typename = record {
  experimenter_id : nat(32,msbf);
  exp_type        : nat(32,msbf);
  data            : Data;
}

def MultipartReqPayload(t:MultipartType):typename = variant {
  MultipartReqDesc          if t == DESC;
  MultipartReqFlow          if t == FLOW;
  MultipartReqAggregate     if t == AGGREGATE;
  MultipartReqPort          if t == PORT;
  MultipartReqTable         if t == TABLE;
  MultipartReqQueue         if t == QUEUE;
  MultipartReqGroup         if t == GROUP;
  MultipartReqGroupDesc     if t == GROUP_DESC;
  MultipartReqGroupFeatures if t == GROUP_FEATURES;
  MultipartReqMeter         if t == METER;
  MultipartReqMeterConfig   if t == METER_CONFIG;
  MultipartReqMeterFeatures if t == METER_FEATURES;
  MultipartReqTableFeatures if t == TABLE_FEATURES;
  MultipartReqExperimenter  if t == EXPERIMENTER;
}
  
def MultipartReq : typename = record {
  type    : MultipartType;
  flags   : nat(16,msbf);
  payload : MultipartReqPayload(type);
}

def MultipartResDesc : typename = record {
  mfr_desc   : array(char, 256);
  hw_desc    : array(char, 256);
  sw_desc    : array(char, 256);
  serial_num : array(char, 32);
  dp_desc    : array(char, 256);
}

def MultipartResFlow : typename = record {
  length        : nat(16,msbf);
  table_id      : nat(8);
                : nat(8);
  duration_sec  : nat(32,msbf); 	
  duration_nsec : nat(32,msbf);
  priority      : nat(16,msbf);
  idle_timeout  : nat(16,msbf); 
  hard_timeout  : nat(16,msbf);  
  flags         : nat(16,msbf);  
                : nat(32);
  cookie        : nat(64,msbf);  
  packet_count  : nat(64,msbf); 
  byte_count    : nat(64,msbf); 
  match         : Match;
  instructions  : vector(Instruction);
}

def MultipartResFlows : typename = record {
  flows : vector(MultipartResFlow);
}

def MultipartResAggregate : typename = record {
  packet_count : nat(64,msbf); 
  byte_count   : nat(64,msbf); 
  flow_count   : nat(32,msbf); 
               : nat(32);
}

def MultipartResTable : typename = record {
  table_id           : nat(8);
                     : nat(24);
  active_count       : nat(32,msbf);
  lookup_count       : nat(64,msbf);
  matched_count      : nat(64,msbf); 
}

def MultipartResTables : typename = record {
  tables : vector(MultipartResTable);
}

def MultipartResPort : typename = record {
  port_no      : PortID;
               : nat(48);
  rx_packets   : nat(64,msbf); 
  tx_packets   : nat(64,msbf);   
  rx_bytes     : nat(64,msbf); 
  tx_bytes     : nat(64,msbf); 
  rx_dropped   : nat(64,msbf); 
  tx_dropped   : nat(64,msbf);
  rx_errors    : nat(64,msbf); 
  tx_errors    : nat(64,msbf);   
  rx_frame_err : nat(64,msbf);  
  rx_over_err  : nat(64,msbf);  
  rx_crc_err   : nat(64,msbf);  
  collisions   : nat(64,msbf); 
  duration_sec  : nat(32,msbf);
  duration_nsec : nat(32,msbf);  
}

def MultipartResPorts : typename = record {
  ports : vector(MultipartResPort);
}

def MultipartResQueue : typename = record {
  length        : nat(32,msbf);
  queue_id      : nat(32,msbf);	
  tx_bytes      : nat(64,msbf); 
  tx_packets    : nat(64,msbf); 
  tx_errors     : nat(64,msbf);
  duration_sec  : nat(32,msbf);
  duration_nsec : nat(32,msbf);  
}

def MultipartResQueues : typename = record {
  queues : vector(MultipartResQueue);
}

def BucketCounter : typename = record {
  packet_count    : nat(64,msbf); 
  byte_count      : nat(64,msbf);
}

def MultipartResGroup : typename = record {
  length          : nat(16,msbf);
                  : nat(16);
  group_id        : nat(32,msbf);
  ref_count       : nat(32,msbf);
                  : nat(32);
  packet_count    : nat(64,msbf); 
  byte_count      : nat(64,msbf);
  duration_sec    : nat(32,msbf);
  duration_nsec   : nat(32,msbf);   
  bucket_counters : vector(BucketCounter)  
}

def MultipartResGroupDesc : typename = record {
  length   : nat(16,msbf);
  type     : nat(8);
           : nat(8);
  group_id : nat(32,msbf);
  buckets  : vector(Bucket);
}

def GroupFeatureCapabilities : typename = enum(nat(32,msbf)) {	
  0..(1 << 4 - 1),
  SELECT_WEIGHT   = 1 << 0,
  SELECT_LIVENESS = 1 << 1,
  CHAINING        = 1 << 2,
  CHAINING_CHECKS = 1 << 3
}

def MultipartResGroupFeatures : typename = record {
  type                : nat(32,msbf);
  capabilities        : GroupFeatureCapabilities;
  max_groups_all      : nat(32,msbf);
  max_groups_select   : nat(32,msbf);
  max_groups_indirect : nat(32,msbf);
  max_groups_ff       : nat(32,msbf);
  actions_all         : nat(32,msbf);
  actions_select      : nat(32,msbf);
  actions_indirect    : nat(32,msbf);
  actions_ff          : nat(32,msbf);
}

def MeterBandStats : typename = record {
  packet_band_count : nat(64,msbf);
  byte_band_count   : nat(64,msbf);
}

def MultipartResMeter : typename = record {
  meter_id        : nat(32,msbf);
  len             : nat(16,msbf); 
                  : nat(48);
  flow_count      : nat(32,msbf);
  packet_in_count : nat(64,msbf);
  byte_in_count   : nat(64,msbf);
  duration_sec    : nat(32,msbf);
  duration_nsec   : nat(32,msbf);
  meter_bands     : vector(MeterBandStats);
}

def MultipartResMeters : typename = record {
  meters : vector(MultipartMeter);
}

def MultipartResMeterConfig : typename = record {
  length   : nat(16,msbf);  
  flags    : nat(16,msbf); 
  meter_id : nat(32,msbf);  
}

def MultipartResMeterConfigs : typename = record {
  meter_configs : vector(MultipartMeterConfig);
}

def MeterBandType : typename = enum(nat(32,msbf)) {	
  DROP         = 1,
  DSCP_REMARK  = 2,
  EXPERIMENTER = 0xFF
}

def MeterFlags : typename = enum(nat(32,msbf)) {	
  0..(1 << 4 - 1)
  KBPS  = 1 << 0,
  PKTPS = 1 << 1,
  BURST = 1 << 2,
  STATS = 1 << 3
}

def MultipartResMeterFeatures : typename = record {
  max_meter    : nat(32,msbf);
  band_types   : MeterBandType;
  capabilities : MeterFlags;
  max_bands    : nat(8);
  max_color    : nat(8);
               : nat(16);
}

def TableFeaturePropertyType : typename = enum(nat(16,msbf)) {	
  INSTRUCTIONS        = 0,
  INSTRUCTIONS_MISS   = 1,
  NEXT_TABLES         = 2,
  NEXT_TABLES_MISS    = 3,
  WRITE_ACTIONS       = 4,
  WRITE_ACTIONS_MISS  = 5,
  APPLY_ACTIONS       = 6,
  APPLY_ACTIONS_MISS  = 7,
  MATCH               = 8,
  WILDCARDS           = 10,
  WRITE_SETFIELD      = 12,
  WRITE_SETFIELD_MISS = 13,
  APPLY_SETFIELD      = 14,
  APPLY_SETFIELD_MISS = 15,
  EXPERIMENTER        = 0xFE,
  EXPERIMENTER_MISS   = 0xFF
}

def TableFeaturePropertyInstructions : typename = record {
  instruction_ids : vector(Instruction);
}

def TableFeaturePropertyNextTables : typename = record {
  next_table_ids : vector(nat(8));
}

def TableFeaturePropertyActions : typename = record {
  action_ids : vector(Action);
}

def TableFeaturePropertyOxm : typename = record {
  oxm_ids : vector(OxmHeader);
}

def TableFeaturePropertyPayload(t:TableFeaturePropertyType):typename = variant {
  TableFeaturePropertyInstructions  if t == INSTRUCTIONS | INSTRUCTIONS_MISS;
  TableFeaturePropertyNextTables    if t == NEXT_TABLES | NEXT_TABLES_MISS;
  TableFeaturePropertyActions       if t == WRITE_ACTIONS | WRITE_ACTIONS_MISS |
                                            APPLY_ACTIONS | APPLY_ACTIONS_MISS;
  TableFeaturePropertyOxm           if t == MATCH | WILDCARDS |
                                            WRITE_SETFIELD | WRITE_SETFIELD_MISS |
                                            APPLY_SETFIELD | APPLY_SETFIELD_MISS;
}

def TableFeatureProperty : typename = record {
  type    : TableFeaturePropertyType;
  length  : nat(16,msbf);
  payload : TableFeaturePropertyPayload(type);
}

def MultipartResTableFeature : typename = record {
  length         : nat(16,msbf);
  table_id       : nat(8);
                 : nat(40);
  name           : array(char, 32);
  metadata_match : nat(64,msbf); 
  metadata_write : nat(64,msbf);
  config         : nat(32,msbf);
  max_entries    : nat(32,msbf);  
  properties     : vector(TableFeatureProperty);
}

def MultipartResTableFeatures : typename = record {
  table_features : vector(MultipartResTableFeature);
}


def MultipartResExperimenter : typename = record {
  experimenter_id : nat(32,msbf);
  data            : Data;
}

def MultipartResPayload(t:MultipartType):typename = variant {
  MultipartResDesc          if t == DESC;
  MultipartResFlows         if t == FLOW;
  MultipartResAggregate     if t == AGGREGATE;
  MultipartResPorts         if t == PORT;
  MultipartResTables        if t == TABLE;
  MultipartResQueues        if t == QUEUE;
  MultipartResGroup         if t == GROUP;
  MultipartResGroupDesc     if t == GROUP_DESC;
  MultipartResGroupFeatures if t == GROUP_FEATURES;
  MultipartResMeters        if t == METER;
  MultipartResMeterConfigs  if t == METER_CONFIG;
  MultipartResMeterFeatures if t == METER_FEATURES;
  MultipartResTableFeatures if t == TABLE_FEATURES;
  MultipartResExperimenter  if t == EXPERIMENTER;
}

def MultipartRes : typename = record {
  type    : MultipartType;
  flags   : nat(16,msbf);
  payload : MultipartResPayload(type);
}

def BarrierReq : typename = Empty;
def BarrierRes : typename = Empty;

def QueueGetConfigReq : typename = record {
  port : PortID;
       : nat(32);
}

def Property : typename = enum(nat(16,msbf)) {	
  MIN_RATE     = 1,
  MAX_RATE     = 2,
  EXPERIMENTER = 0xFF
}

def QueuePropertyRate : typename = record {
  rate : nat(16,msbf);
       : nat(48,msbf);
}

def QueuePropertyMinRate : typename = QueuePropertyRate;
def QueuePropertyMaxRate : typename = QueuePropertyRate;

def QueuePropertyExperimenter : typename = record {
  experimenter : nat(32,msbf);
               : nat(32);
  data         : vector(nat(8));
}

def QueueProperyPayload(t:Property):typename = variant {
  QueuePropertyMinRate      if t == MIN_RATE;
  QueuePropertyMaxRate      if t == MAX_RATE;
  QueuePropertyExperimenter if t == EXPERIMENTER;
}

def QueueProperty : typename = record {
  property : Property;
  length   : nat(16,msbf);
           : nat(32,msbf);
  payload  : constrain(length - 8, QueueProperyPayload(property));
}

def Queue : typename = record {
  queue_id   : nat(32,msbf);
  length     : nat(16,msbf);
             : nat(16,msbf);
  properties : constrain(length - 8, vector(QueueProperty));
}

def QueueGetConfigRes : typename = record {
  port   : PortID;
         : nat(48);
  queues : vector(Queue);	   
}

def RoleReq : type = Empty;

def Role : typename = enum(nat(64,msbf)) {	
  NO_CHANGE = 0,
  EQUAL     = 1,
  MASTER    = 2,
  SLAVE     = 3
}

def RoleRes : typename = record {
  role          : Role;
                : nat(32);
  generation_id : nat(64,msbf);  	   
}

def GetAsyncReq : typename = Empty;

def PacketInMask : typename = enum(nat(32,msbf)) {	
  0..(1 << 3 - 1),
  NO_MATCH    = 1 << 0,
  ACTION      = 1 << 1,
  INVALID_TTL = 1 << 2
}

def PortStatusMask : typename = enum(nat(32,msbf)) {	
  0..(1 << 3 - 1),
  ADD    = 1 << 0,
  DELETE = 1 << 1,
  MODIFY = 1 << 2
}

def FlowRemovedMask : typename = enum(nat(32,msbf)) {	
  IDLE_TIMEOUT = 1,
  HARD_TIMEOUT = 2,
  DELETE       = 3,
  GROUP_DELETE = 4
}
 
def Async : typename = record {
  packet_in_mask          : PacketInMask;
  packet_in_mask_slave    : PacketInMask;
  port_status_mask        : PortStatusMask;
  port_status_mask_slave  : PortStatusMask;
  flow_removed_mask       : FlowRemovedMask;
  flow_removed_mask_slave : FlowRemovedMask;
}
 
def GetAsyncRes : typename = Async;
def SetAsync : typename = Async;

def MeterModCommand : typename = enum(nat(16,msbf)) {	
  ADD    = 0,
  DELETE = 1,
  MODIFY = 2
}

def MeterId : typename = enum(nat(32,msbf)) {	
  0..0xFFFF0000,
  SLOW_DATAPATH = 0xFFFFFFFD,
  CONTROLLER    = 0xFFFFFFFE,
  ALL           = 0xFFFFFFFF
}

def MeterBand : typename = record {
  type       : MeterBandType;
  len        : nat(16,msbf); 
  rate       : nat(32,msbf); 
  burst_size : nat(32,msbf); 
             : nat(32);
}

def MeterMod : typename = record {
  command     : MeterModCommand;
  flags       : MeterFlags;
  meter_id    : MeterId;
  meter_bands : vector(MeterBand);
}

def Payload(t:Type):typename = variant {
  Hello             if t == HELLO;
  Error             if t == ERROR;
  EchoReq           if t == ECHO_REQ;
  EchoRes           if t == ECHO_RES;
  Experimenter      if t == EXPERIMENTER;
  FeatureReq        if t == FEATURE_REQ;
  FeatureRes        if t == FEATURE_RES;
  GetConfigReq      if t == GET_CONFIG_REQ;
  GetConfigRes      if t == GET_CONFIG_RES;
  SetConfig         if t == SET_CONFIG;
  PacketIn          if t == PACKET_IN;
  FlowRemoved       if t == FLOW_REMOVED;
  PortStatus        if t == PORT_STATUS;
  PacketOut         if t == PACKET_OUT;
  FlowMod           if t == FLOW_MOD;
  GroupMod          if t == GROUP_MOD;
  PortMod           if t == PORT_MOD;
  TableMod          if t == TABLE_MOD;
  MultipartReq      if t == MULTIPART_REQ;
  MultipartRes      if t == MULTIPART_RES;
  BarrierReq        if t == BARRIER_REQ;
  BarrierRes        if t == BARRIER_RES;
  QueueGetConfigReq if t == QUEUE_GET_CONFIG_REQ;
  QueueGetConfigRes if t == QUEUE_GET_CONFIG_RES;
  RoleReq           if t == ROLE_REQ;
  RoleRes           if t == ROLE_RES;
  GetAsyncReq       if t == GET_ASYNC_REQ;
  GetAsyncRes       if t == GET_ASYNC_RES;
  SetAsync          if t == SET_ASYNC;
  MeterMod          if t == METER_MOD;
}

def Message : typename = record {
  version : Version;
  type    : Type;
  length  : nat(16,msbf);
  xid     : nat(32,msbf);
  payload : constrain(length - 8, Payload(type));
}

} // v1_2 namspace
} // ofp namespace 